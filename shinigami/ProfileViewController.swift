//
//  ProfileViewController.swift
//  shinigami
//
//  Created by Nathan Chan on 6/1/17.
//  Copyright Â© 2017 Nathan Chan. All rights reserved.
//

import UIKit
import TwitterKit

class ProfileViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var user: TWTRUserCustom?
    private var tweets: [TWTRTweet] = []
    
    @IBOutlet weak var profileTableView: UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.profileTableView.dataSource = self
        self.profileTableView.delegate = self
        
        // dynamic cell height based on inner content
        self.profileTableView.rowHeight = UITableViewAutomaticDimension
        self.profileTableView.estimatedRowHeight = 120
        // remove separator lines between empty rows
        self.profileTableView.tableFooterView = UIView(frame: CGRect.zero)
        
        guard let user = self.user else {
            fatalError("User is not set.")
        }
        let client = TWTRAPIClient.withCurrentUser()
        var clientError : NSError?
        
        let createListEndpoint = "https://api.twitter.com/1.1/lists/create.json"
        let listNameCharacterLimit = 25
        var listName = "TE_\(user.screenName)"
        if listName.characters.count > listNameCharacterLimit {
            listName = listName.substring(to: listName.index(listName.startIndex, offsetBy: listNameCharacterLimit))
        }
        let params = [
            "name": listName,
            "description": "List generated by Twitter Eyes"
        ]
        let request = client.urlRequest(withMethod: "POST", url: createListEndpoint, parameters: params, error: &clientError)
        
        client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
            guard let data = data else {
                print("Error: \(connectionError.debugDescription)")
                return
            }
            
            do {
                let jsonData = try JSONSerialization.jsonObject(with: data) as AnyObject
                let listID = String(describing: jsonData["id_str"]!!)
                
                let getFollowingIdsEndpoint = "https://api.twitter.com/1.1/friends/ids.json?screen_name=\(user.screenName)"
                let request = client.urlRequest(withMethod: "GET", url: getFollowingIdsEndpoint, parameters: nil, error: &clientError)
                
                client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                    guard let data = data else {
                        print("Error: \(connectionError.debugDescription)")
                        return
                    }
                    
                    do {
                        let jsonData = try JSONSerialization.jsonObject(with: data) as AnyObject
                        let followingIdsList = (jsonData["ids"]! as! [Int]).map { String(describing: $0) }
                        
                        let addMembersToListEndpoint = "https://api.twitter.com/1.1/lists/members/create_all.json"
                        let params = [
                            "list_id": listID,
                            "user_id": followingIdsList.joined(separator: ",")
                        ]
                        // NOTE: this has a user_id list limit of 100 https://dev.twitter.com/rest/reference/post/lists/members/create_all
                        let request = client.urlRequest(withMethod: "POST", url: addMembersToListEndpoint, parameters: params, error: &clientError)
                        
                        client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                            if data == nil {
                                print("Error: \(connectionError.debugDescription)")
                                return
                            }
                            // successfully added members to list
                                
                            let getListTweetsEndpoint = "https://api.twitter.com/1.1/lists/statuses.json?list_id=\(listID)"
                            let request = client.urlRequest(withMethod: "GET", url: getListTweetsEndpoint, parameters: nil, error: &clientError)
                            
                            client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                                guard let data = data else {
                                    print("Error: \(connectionError.debugDescription)")
                                    return
                                }
                                
                                do {
                                    let jsonData = try JSONSerialization.jsonObject(with: data) as! [AnyObject]
                                    self.tweets = TWTRTweet.tweets(withJSONArray: jsonData) as! [TWTRTweet]
                                    self.profileTableView.reloadData()
                                } catch let jsonError as NSError {
                                    print("json error: \(jsonError.localizedDescription)")
                                }
                            }
                        }
                    } catch let jsonError as NSError {
                        print("json error: \(jsonError.localizedDescription)")
                    }
                }
                
            } catch let jsonError as NSError {
                // intentionally don't reset self.users values so we can continue displaying last retrieved results in case of error
                print("json error: \(jsonError.localizedDescription)")
            }
        }

    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            guard let profileCell = tableView.dequeueReusableCell(withIdentifier: "profileCell", for: indexPath) as? ProfileTableViewCell else {
                fatalError("The dequeued cell is not an instance of ProfileTableViewCell.")
            }
            guard let user = self.user else {
                fatalError("User is not set.")
            }
            
            profileCell.profileImageView.image(fromUrl: user.profileImageOriginalSizeUrl)
            profileCell.profileImageView.layer.cornerRadius = 5
            profileCell.profileImageView.clipsToBounds = true
            profileCell.nameLabel.text = user.name
            profileCell.screenNameLabel.text = "@\(user.screenName)"
            profileCell.isVerifiedImageView.isHidden = !user.isVerified
            profileCell.descriptionLabel.text = user.description
            profileCell.whatNameSeesLabel.text = "What \(user.name) sees..."
            profileCell.followingLabel.text = "\(user.followingCount) following"
            return profileCell
        } else {
            guard let tweetCell = tableView.dequeueReusableCell(withIdentifier: "tweetCell", for: indexPath) as? TWTRTweetTableViewCell else {
                fatalError("The dequeued cell is not an instance of TWTRTweetTableViewCell.")
            }
            
            tweetCell.configure(with: self.tweets[indexPath.row - 1])
            tweetCell.tweetView.showActionButtons = true
            tweetCell.tweetView.showBorder = false
            return tweetCell
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tweets.count + 1
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            // link to user profile in Twitter app?
        } else {
            // link to tweet in Twitter app?
        }
    }
}
