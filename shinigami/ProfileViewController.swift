//
//  ProfileViewController.swift
//  shinigami
//
//  Created by Nathan Chan on 6/1/17.
//  Copyright Â© 2017 Nathan Chan. All rights reserved.
//

import UIKit
import TwitterKit
import SwiftyJSON

class ProfileViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    var user: TWTRUserCustom?
    private let client = TWTRAPIClient.withCurrentUser()
    private var clientError: NSError?
    private var listID: String?
    private var tweets: [TWTRTweet] = []
    private var showSorryCell: Bool = false
    private func errorOccured() {
        self.showSorryCell = true
        self.profileTableView.reloadData()
    }
    
    @IBOutlet weak var profileTableView: UITableView!
    
    func loadListTweets() {
        guard let listID = self.listID else {
            print("Error: no listID exists.")
            return
        }
        let getListTweetsEndpoint = "https://api.twitter.com/1.1/lists/statuses.json?list_id=\(listID)"
        var params = [
            "count": "50"
        ]
        if let oldestTweet = self.tweets.last {
            params["max_id"] = oldestTweet.tweetID
        }
        let request = self.client.urlRequest(withMethod: "GET", url: getListTweetsEndpoint, parameters: params, error: &self.clientError)
        
        self.client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
            guard let data = data else {
                print("Error: \(connectionError.debugDescription)")
                self.errorOccured()
                return
            }
            
            let jsonData = JSON(data: data)
            self.tweets.append(contentsOf: TWTRTweet.tweets(withJSONArray: jsonData.arrayObject) as! [TWTRTweet])
            self.profileTableView.reloadData()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.profileTableView.dataSource = self
        self.profileTableView.delegate = self
        
        // dynamic cell height based on inner content
        self.profileTableView.rowHeight = UITableViewAutomaticDimension
        self.profileTableView.estimatedRowHeight = 120
        // remove separator lines between empty rows
        self.profileTableView.tableFooterView = UIView(frame: CGRect.zero)
        
        guard let user = self.user else {
            fatalError("User is not set.")
        }
        
        var listName = "TE_\(user.screenName)"
        
        let getListsEndpoint = "https://api.twitter.com/1.1/lists/list.json"
        let request = self.client.urlRequest(withMethod: "GET", url: getListsEndpoint, parameters: nil, error: &self.clientError)
        self.client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
            guard let data = data else {
                print("Error: \(connectionError.debugDescription)")
                self.errorOccured()
                return
            }
            
            let jsonData = JSON(data: data)
            let matchingLists = jsonData.arrayValue.filter { $0["name"].stringValue == listName && $0["member_count"] > 0}
            if let matchingList = matchingLists.first {
                self.listID = matchingList["id_str"].string
                self.loadListTweets()
            } else {
                let createListEndpoint = "https://api.twitter.com/1.1/lists/create.json"
                let listNameCharacterLimit = 25
                if listName.characters.count > listNameCharacterLimit {
                    listName = listName.substring(to: listName.index(listName.startIndex, offsetBy: listNameCharacterLimit))
                }
                let params = [
                    "name": listName,
                    "description": "List generated by Twitter Eyes"
                ]
                let request = self.client.urlRequest(withMethod: "POST", url: createListEndpoint, parameters: params, error: &self.clientError)
                
                self.client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                    guard let data = data else {
                        print("Error: \(connectionError.debugDescription)")
                        self.errorOccured()
                        return
                    }
                    
                    let jsonData = JSON(data: data)
                    self.listID = jsonData["id_str"].stringValue
                    
                    let getFollowingIdsEndpoint = "https://api.twitter.com/1.1/friends/ids.json?screen_name=\(user.screenName)"
                    let request = self.client.urlRequest(withMethod: "GET", url: getFollowingIdsEndpoint, parameters: nil, error: &self.clientError)
                    
                    self.client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                        guard let data = data else {
                            print("Error: \(connectionError.debugDescription)")
                            self.errorOccured()
                            return
                        }
                        
                        let jsonData = JSON(data: data)
                        let followingIdsList = (jsonData["ids"].arrayValue).map { String(describing: $0.intValue) }
                        
                        let addMembersToListEndpoint = "https://api.twitter.com/1.1/lists/members/create_all.json"
                        // NOTE: this has a user_id list limit of 100 https://dev.twitter.com/rest/reference/post/lists/members/create_all
                        let addMembersDispatchGroup = DispatchGroup()
                        let maxMembersCount = 100
                        let requestsCount = 1 // TEMPORARY: (followingIdsList.count / maxMembersCount) + 1
                        for i in 0..<requestsCount {
                            addMembersDispatchGroup.enter()
                            let startIndex = maxMembersCount*i
                            let endIndex = min(maxMembersCount*(i+1), followingIdsList.count)
                            let params = [
                                "list_id": self.listID!,
                                "user_id": followingIdsList[startIndex..<endIndex].joined(separator: ",")
                            ]
                            let request = self.client.urlRequest(withMethod: "POST", url: addMembersToListEndpoint, parameters: params, error: &self.clientError)
                            
                            self.client.sendTwitterRequest(request) { (_, data, connectionError) -> Void in
                                guard let data = data else {
                                    print("Error: \(connectionError.debugDescription)")
                                    self.errorOccured()
                                    return
                                }
                                
                                let jsonData = JSON(data: data)
                                if jsonData["member_count"].int == 0 {
                                    print("Error: response to lists/members/create_all.json returned successfully, but no members were added")
                                    self.errorOccured()
                                    return
                                }
                                
                                addMembersDispatchGroup.leave()
                            }
                        }
                        
                        addMembersDispatchGroup.notify(queue: .main) {
                            self.loadListTweets()
                        }
                    }
                }
            }
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            guard let profileCell = tableView.dequeueReusableCell(withIdentifier: "profileCell", for: indexPath) as? ProfileTableViewCell else {
                fatalError("The dequeued cell is not an instance of ProfileTableViewCell.")
            }
            guard let user = self.user else {
                fatalError("User is not set.")
            }
            
            profileCell.profileImageView.image(fromUrl: user.profileImageOriginalSizeUrl)
            profileCell.profileImageView.layer.cornerRadius = 5
            profileCell.profileImageView.clipsToBounds = true
            profileCell.nameLabel.text = user.name
            profileCell.screenNameLabel.text = "@\(user.screenName)"
            profileCell.isVerifiedImageView.isHidden = !user.isVerified
            profileCell.descriptionLabel.text = user.description
            profileCell.whatNameSeesLabel.text = "What \(user.name) sees..."
            profileCell.followingLabel.text = abbreviateNumber(num: user.followingCount)
            return profileCell
        } else if self.showSorryCell {
            let sorryCell = tableView.dequeueReusableCell(withIdentifier: "sorryCell", for: indexPath) as UITableViewCell
            return sorryCell
        } else {
            guard let tweetCell = tableView.dequeueReusableCell(withIdentifier: "tweetCell", for: indexPath) as? TWTRTweetTableViewCell else {
                fatalError("The dequeued cell is not an instance of TWTRTweetTableViewCell.")
            }
            
            tweetCell.configure(with: self.tweets[indexPath.row - 1])
            tweetCell.tweetView.showActionButtons = true
            tweetCell.tweetView.showBorder = false
            return tweetCell
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return tweets.count + 1 + (self.showSorryCell ? 1 : 0)
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            // link to user profile in Twitter app?
        } else {
            // link to tweet in Twitter app?
        }
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == self.tweets.count - 1 {
            loadListTweets()
        }
    }
}
